name: Promote to Production
on:
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

jobs:
  load-pr:
    name: Load PR data
    uses: ./.github/workflows/load-pr-data.yml

  build-or-retag:
    name: Prepare :latest image
    runs-on: ubuntu-latest
    environment: staging-deploy
    needs: load-pr
    if: |
      contains(fromJson(needs.load-pr.outputs.pr_data).labels.*.name, 'events') ||
      contains(fromJson(needs.load-pr.outputs.pr_data).labels.*.name, 'bot')

    steps:
      - uses: actions/checkout@v4

      - name: Log in to registry
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - id: check-image
        name: Check if SHA image exists (from staging)
        shell: bash
        run: |
          if docker manifest inspect "${{ vars.REGISTRY_URL }}/netku/netku-sentinel:${{ github.sha }}" >/dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Retag and push :latest from :${{ github.sha }}
        if: steps.check-image.outputs.exists == 'true'
        run: |
          docker pull "${{ vars.REGISTRY_URL }}/netku/netku-sentinel:${{ github.sha }}"
          docker tag  "${{ vars.REGISTRY_URL }}/netku/netku-sentinel:${{ github.sha }}" "${{ vars.REGISTRY_URL }}/netku/netku-sentinel:latest"
          docker push "${{ vars.REGISTRY_URL }}/netku/netku-sentinel:latest"

      - name: Build and push :latest (staging image not found)
        if: steps.check-image.outputs.exists == 'false'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ vars.REGISTRY_URL }}/netku/netku-sentinel:latest

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build-or-retag, load-pr]
    environment: staging-deploy
    if: |
      always() && (needs.build-or-retag.result == 'success' || needs.build-or-retag.result == 'skipped') &&
      contains(fromJson(needs.load-pr.outputs.pr_data).labels.*.name, 'redeploy')

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Create Sentry release
        uses: getsentry/action-release@v3
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: production
          release: "${{ github.sha}}"

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
      - name: Deploy via SSH
        run: |
          ssh -p ${{ secrets.SSH_PORT }} root@${{ secrets.SERVER_IP }} << 'EOF'
            cd ${{ secrets.PROJECT_DIR }}
            git pull

            sops -d k8s/secrets-prod.yaml > k8s/temp-secrets.yaml && \
            helm upgrade --install netku-sentinel-prod -f k8s/values-prod.yaml \
            --set container.tag=latest --namespace netku-prod k8s \
            && rm k8s/temp-secrets.yaml
          EOF

      - name: Uninstall staging via SSH
        run: |
          ssh -p ${{ secrets.SSH_PORT }} root@${{ secrets.SERVER_IP }} << 'EOF'
            cd ${{ secrets.PROJECT_DIR }}
            helm uninstall --ignore-not-found netku-sentinel-staging --namespace netku-staging
          EOF

      - name: Redeploy dev via SSH
        run: |
          ssh -p ${{ secrets.SSH_PORT }} root@${{ secrets.SERVER_IP }} << 'EOF'
            cd ${{ secrets.PROJECT_DIR }}
            sops -d k8s/secrets-dev.yaml > k8s/temp-secrets.yaml && \
            helm upgrade --install netku-sentinel-dev -f k8s/values-dev.yaml \
            --set container.tag=latest --namespace netku-dev k8s \
            && rm k8s/temp-secrets.yaml
          EOF
